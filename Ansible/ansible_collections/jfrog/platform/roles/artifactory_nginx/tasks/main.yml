- name: Check required variables
  ansible.builtin.fail: msg="Variable '{{ item }}' is not defined, empty, or contains only placeholder text"
  when: 
    - (vars[item] is not defined) or (vars[item] | string | trim | length == 0) or (vars[item] | trim | regex_search('^#'))
    - artifactory_nginx_ssl_enabled is defined
    - artifactory_nginx_ssl_enabled | bool
  loop:
    - ssl_certificate
    - ssl_certificate_key
    - server_name

- name: Install upstream packages
  when: nginx_upstream | bool
  ansible.builtin.include_tasks: "{{ ansible_os_family }}-upstream.yml"

- name: Install packages from distribution server
  when: not nginx_upstream | bool
  ansible.builtin.include_tasks: "{{ ansible_os_family }}-ownstream.yml"

- name: Install nginx
  become: true
  ansible.builtin.package:
    name: nginx
    state: present
  register: install_nginx
  retries: 5
  delay: 60
  until: install_nginx is succeeded

- name: Configure main nginx conf file.
  become: true
  ansible.builtin.template:
    src: "{{ nginx_conf_template }}"
    dest: /etc/nginx/nginx.conf
    owner: root
    group: root
    mode: '0755'

- name: Configure redirect nginx conf
  become: true
  ansible.builtin.copy:
    src: redirect_http_to_https.conf
    dest: /etc/nginx/conf.d/redirect_http_to_https.conf
    owner: root
    group: root
    mode: '0755'
  when: 
    - redirect_http_to_https_enabled | bool
    - artifactory_nginx_ssl_enabled is defined
    - artifactory_nginx_ssl_enabled | bool
  notify: Restart nginx

- name: Configure the artifactory nginx conf
  become: true
  ansible.builtin.template:
    src: "{{ artifactory_conf_template }}"
    dest: /etc/nginx/conf.d/artifactory.conf
    owner: root
    group: root
    mode: '0755'
  notify: Restart nginx

- name: Configure SSL
  when:
    - artifactory_nginx_ssl_enabled is defined
    - artifactory_nginx_ssl_enabled | bool
    - ssl_certificate_install | bool
  block:
    - name: Create directory
      become: true
      ansible.builtin.file:
        path: "/var/opt/jfrog/nginx/ssl"
        state: directory
        mode: '0755'

    - name: Ensure ssl_certificate_path exists
      become: true
      ansible.builtin.file:
        path: "{{ ssl_certificate_path }}"
        state: directory
        mode: '0755'

    - name: Ensure ssl_certificate_key_path exists
      become: true
      ansible.builtin.file:
        path: "{{ ssl_certificate_key_path }}"
        state: directory
        mode: '0700'

    - name: Configure certificate
      become: true
      ansible.builtin.template:
        src: certificate.pem.j2
        dest: "{{ ssl_certificate_path }}/{{ ssl_certificate_name }}"
        mode: '0644'
      notify: Restart nginx
      no_log: false

    - name: Configure key
      become: true
      ansible.builtin.template:
        src: certificate.key.j2
        dest: "{{ ssl_certificate_key_path }}/{{ ssl_certificate_key_name }}"
        mode: '0600'
      notify: Restart nginx
      no_log: false

- name: Ensure mtls_ca_certificate_key_path exists
  become: true
  ansible.builtin.file:
    path: "{{ mtls_ca_certificate_path }}"
    state: directory
    mode: 0755
  when: 
    - mtls_ca_certificate_install
    - artifactory_version is version('7.77.0', '>=')

- name: Configure mtls ca certificate
  become: true
  ansible.builtin.template:
    src: certificate.crt.j2
    dest: "{{ mtls_ca_certificate_path }}/{{ mtls_mtls_ca_certificate_crt_name }}"
    mode: 0644
  notify: Restart nginx
  no_log: true
  when: 
    - mtls_ca_certificate_install
    - artifactory_version is version('7.77.0', '>=')

- name: Configure mtls ca key
  become: true
  ansible.builtin.template:
    src: certificate.cakey.j2
    dest: "{{ mtls_ca_certificate_path }}/{{ mtls_mtls_ca_certificate_key_name }}"
    mode: 0600
  notify: Restart nginx
  no_log: true
  when: 
    - mtls_ca_certificate_install
    - artifactory_version is version('7.77.0', '>=')

- name: Restart nginx
  ansible.builtin.meta: flush_handlers
