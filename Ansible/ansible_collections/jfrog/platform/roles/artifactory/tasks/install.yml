- debug:
    msg: "Performing installation of Artifactory version : {{ artifactory_version }} "

- name: Install prerequisite packages
  include_tasks: "{{ ansible_os_family }}.yml"

- name: Install nginx
  include_role:
    name: artifactory_nginx
  when:
    - artifactory_nginx_enabled | bool
    - not artifactory_nginx_ssl_enabled | bool

- name: Install nginx with SSL
  include_role:
    name: artifactory_nginx_ssl
  when:
    - not artifactory_nginx_enabled | bool
    - artifactory_nginx_ssl_enabled | bool

- name: Ensure group artifactory exist
  become: yes
  group:
    name: "{{ artifactory_group }}"
    state: present

- name: Ensure user artifactory exist
  become: yes
  user:
    name: "{{ artifactory_user }}"
    group: "{{ artifactory_group }}"
    create_home: yes
    home: "{{ artifactory_home }}"
    shell: /bin/bash
    state: present

- name: Check if artifactory tar already exists
  become: yes
  stat:
    path: "{{ jfrog_home_directory }}/{{ artifactory_tar_file_name }}"
  register: artifactory_tar_check

- name: Download artifactory
  become: yes
  get_url:
    url: "{{ artifactory_tar }}"
    timeout: "{{ artifactory_download_timeout }}"
    dest: "{{ jfrog_home_directory }}"
  register: download_artifactory
  until: download_artifactory is succeeded
  retries: 3
  when: not artifactory_tar_check.stat.exists

- name: Extract artifactory tar
  become: yes
  unarchive:
    src: "{{ jfrog_home_directory }}/{{ artifactory_tar_file_name }}"
    dest: "{{ jfrog_home_directory }}"
    remote_src: true
    owner: "{{ artifactory_user }}"
    group: "{{ artifactory_group }}"
    creates: "{{ artifactory_untar_home }}"
  when: download_artifactory is succeeded

- name: Check if app directory exists
  become: yes
  stat:
    path: "{{ artifactory_home }}/app"
  register: app_dir_check

- name: Copy untar directory to artifactory home
  become: yes
  command: "cp -r {{ artifactory_untar_home }}/. {{ artifactory_home }}"
  when: not app_dir_check.stat.exists

- name: Create required directories
  become: yes
  file:
    path: "{{ item }}"
    state: directory
    recurse: yes
    owner: "{{ artifactory_user }}"
    group: "{{ artifactory_group }}"
  loop:
    - "{{ artifactory_home }}/var/data"
    - "{{ artifactory_home }}/var/etc"
    - "{{ artifactory_home }}/var/etc/security/"
    - "{{ artifactory_home }}/var/etc/artifactory/info/"

- name: Check if systemyaml exists
  become: yes
  stat:
    path: "{{ artifactory_home }}/var/etc/system.yaml"
  register: systemyaml

- name: Configure systemyaml
  become: yes
  template:
    src: "{{ artifactory_system_yaml_template }}"
    dest: "{{ artifactory_home }}/var/etc/system.yaml"
  when:
    - artifactory_systemyaml is defined
    - artifactory_systemyaml|length > 0
    - artifactory_systemyaml_override or (not systemyaml.stat.exists) 
  notify: restart artifactory

- name: Configure master key
  become: yes
  copy:
    dest: "{{ artifactory_home }}/var/etc/security/master.key"
    content: "{{ master_key }}"
    owner: "{{ artifactory_user }}"
    group: "{{ artifactory_group }}"
    mode: 0640

- name: Configure installer info
  become: yes
  template:
    src: installer-info.json.j2
    dest: "{{ artifactory_home }}/var/etc/artifactory/info/installer-info.json"
  notify: restart artifactory

- name: Configure binary store
  become: yes
  template:
    src: binarystore.xml.j2
    dest: "{{ artifactory_home }}/var/etc/artifactory/binarystore.xml"
  when:
    - artifactory_binarystore is defined
    - artifactory_binarystore | length > 0
  notify: restart artifactory

- name: Configure single license
  become: yes
  template:
    src: artifactory.lic.j2
    dest: "{{ artifactory_home }}/var/etc/artifactory/artifactory.lic"
  when:
    - artifactory_single_license is defined
    - artifactory_single_license|length > 0
  notify: restart artifactory

- name: Configure HA licenses
  become: yes
  template:
    src: artifactory.cluster.license.j2
    dest: "{{ artifactory_home }}/var/etc/artifactory/artifactory.cluster.license"
  when:
   - artifactory_licenses is defined
   - artifactory_licenses|length > 0
  notify: restart artifactory

- name: Check if database driver exists
  become: yes
  stat:
    path: "{{ artifactory_home }}/app/artifactory/tomcat/lib/jf_postgresql-{{ postgres_driver_version }}.jar"
  register: database_driver

- name: Download database driver
  become: yes
  get_url:
    url: "{{ postgres_driver_download_url }}"
    dest: "{{ artifactory_home }}/var/bootstrap/artifactory/tomcat/lib"
    owner: "{{ artifactory_user }}"
    group: "{{ artifactory_group }}"
  when:
    - postgres_driver_download_url is defined
    - not database_driver.stat.exists
  notify: restart artifactory

- name: Create artifactory service
  become: yes
  shell: "{{ artifactory_home }}/app/bin/installService.sh"
  args:
    creates: "{{ artifactory_service_file }}"

- name: Ensure permissions are correct
  become: yes
  file:
    path: "{{ jfrog_home_directory }}"
    group: "{{ artifactory_group }}"
    owner: "{{ artifactory_user }}"
    recurse: yes

- name: Restart artifactory
  meta: flush_handlers

- name: Make sure artifactory is up and running
  uri:
    url: http://127.0.0.1:8082/router/api/v1/system/health
    timeout: 130
    status_code: 200
  register: result
  until: result is succeeded
  retries: 25
  delay: 5
  when: not ansible_check_mode
