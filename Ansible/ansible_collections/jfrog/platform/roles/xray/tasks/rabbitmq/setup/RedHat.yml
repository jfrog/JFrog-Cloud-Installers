- name: Set package prefix
  ansible.builtin.set_fact:
    rhel_package_prefix: >-
        {%- if linux_distro in ['centos7','redhat7'] -%}
            el7
        {%- elif linux_distro in ['centos8','redhat8'] -%}
            el8
        {%- elif linux_distro in ['centos9','redhat9'] -%}
            el9
        {%- endif -%}

- name: Find socat package
  become: true
  ansible.builtin.find:
    paths: "{{ xray_home }}/app/third-party/rabbitmq/"
    patterns: "^socat.+{{ rhel_package_prefix }}.+\\.rpm$"
    use_regex: true
    file_type: file
  register: check_socat_package_result

- name: Set socat package file name
  ansible.builtin.set_fact:
    xray_socat_package: "{{ check_socat_package_result.files[0].path }}"
  when: check_socat_package_result.matched > 0

- name: Import CentOS GPG public key
  become: true
  ansible.builtin.rpm_key:
    key: "{{ centos_gpg_key }}"
    state: present

- name: Install socat package
  become: true
  ansible.builtin.yum:
    name: "{{ xray_socat_package }}"
    state: present
  vars:
    ansible_python_interpreter: "{{ yum_python_interpreter }}"
  register: install_socat_package_result
  when: check_socat_package_result.matched > 0

- name: Find erlang package
  become: true
  ansible.builtin.find:
    paths: "{{ xray_home }}/app/third-party/rabbitmq/"
    patterns: "^(esl-)?erlang.+{{ rhel_package_prefix }}.+\\.rpm$"
    use_regex: true
    file_type: file
  register: check_erlang_package_result

- name: Set erlang package file name
  ansible.builtin.set_fact:
    xray_erlang_package: "{{ check_erlang_package_result.files[0].path }}"
  when: check_erlang_package_result.matched > 0

- name: Import RabbitMQ release signing key
  become: true
  ignore_errors: true
  ansible.builtin.rpm_key:
    key: https://github.com/rabbitmq/signing-keys/releases/download/2.0/rabbitmq-release-signing-key.asc
    state: present
  register: import_rabbitmq_signing_key_result
  until: import_rabbitmq_signing_key_result is succeeded
  delay: 5
  retries: 3

- name: Install erlang package
  become: true
  ansible.builtin.yum:
    name: "{{ xray_erlang_package }}"
    state: present
    disable_gpg_check: true
  vars:
    ansible_python_interpreter: "{{ yum_python_interpreter }}"
  register: install_erlang_package_result
  when: check_erlang_package_result.matched > 0

- name: Find db-util package
  ansible.builtin.find:
    paths: "{{ xray_home }}/app/third-party/misc/"
    patterns: ["{{ xray_db_util_search_filter[linux_distro]['db'] }}"]
    use_regex: yes
    file_type: file
  register: check_db_util_package_result
  when: ansible_facts['distribution_major_version'] | int in [7, 9]

- name: Set db-util package file name
  ansible.builtin.set_fact:
    xray_db5_util_package: "{{ check_db_util_package_result.files[0].path }}"
  when:
    - ansible_facts['distribution_major_version'] | int in [7, 9]
    - check_db_util_package_result.matched > 0

- name: Install db-util package
  become: true
  yum:
    name: "{{ xray_db5_util_package }}"
    disable_gpg_check: yes
  register: install_db_util_package_result
  when:
    - ansible_facts['distribution_major_version'] | int in [7, 9]
    - check_db_util_package_result.matched > 0

