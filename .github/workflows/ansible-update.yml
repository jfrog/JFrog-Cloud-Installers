name: Auto Update Ansible Collection

on:
  schedule:
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      force_update:
        description: 'Force update even if versions are the same (optional)'
        required: false
        default: false
        type: boolean
      create_release:
        description: 'Create GitHub release for updated ansible collection (optional)'
        required: false
        default: false
        type: boolean

jobs:
  check-ansible-update:
    name: Check for Ansible update
    runs-on: ubuntu-latest
    env:
      ARTIFACTORY_URL: "https://releases.jfrog.io/artifactory/ansible/collections/jfrog/platform/"
    outputs:
      update-available: ${{ steps.check.outputs.ansible-update-available }}
      current-version: ${{ steps.check.outputs.current-ansible-version }}
      latest-version: ${{ steps.check.outputs.latest-ansible-version }}
      update-summary: ${{ steps.check.outputs.update-summary }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl jq
          sudo curl -sL https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -o /usr/bin/yq
          sudo chmod +x /usr/bin/yq

      - name: Run Ansible collection update check
        id: check
        run: |
          chmod +x .github/workflows/check_updates.sh
          .github/workflows/check_updates.sh
        env:
          FORCE_UPDATE: ${{ inputs.force_update }}

  update-ansible-collection:
    name: Update Ansible Collection
    needs: check-ansible-update
    if: needs.check-ansible-update.outputs.update-available == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Update and Create PR for collection 
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ARTIFACTORY_URL: "https://releases.jfrog.io/artifactory/ansible/collections/jfrog/platform/"
        run: |
          # Configure git
          git config --global user.name "IN-Automation"
          git config --global user.email "in-automation@jfrog.com"

          # Set variables
          WORKSPACE_DIR="$PWD"
          VERSION="${{ needs.check-ansible-update.outputs.latest-version }}"
          TIMESTAMP=$(TZ='Asia/Kolkata' date +%Y%m%d-%H%M%S)
          BRANCH="platform-$VERSION-$TIMESTAMP"
          COLLECTION_DIR="$WORKSPACE_DIR/Ansible/ansible_collections/jfrog/platform"

          # Create labels if they don't exist
          gh label create automated --color "0E8A16" --description "Automated changes" || true
          gh label create update --color "1D76DB" --description "Update pull request" || true
          

          # Create new branch
          git checkout -b "$BRANCH" "${{ github.event.repository.default_branch }}"

          # Remove old content
          rm -rf "$COLLECTION_DIR"/*
          
          echo "ðŸ“¦ Downloading collection: ${ARTIFACTORY_URL}${VERSION}/jfrog-platform-${VERSION}.tar.gz"

          curl -Lf -o "${WORKSPACE_DIR}/platform.tar.gz" "${ARTIFACTORY_URL}${VERSION}/jfrog-platform-${VERSION}.tar.gz" || {
            echo "Failed to download collection from Artifactory"
            exit 1
          }

          [ -s "${WORKSPACE_DIR}/platform.tar.gz" ] || {
            echo "Downloaded file is empty"
            exit 1
          }

          mkdir -p "${WORKSPACE_DIR}/tmp"
          tar -xzf "${WORKSPACE_DIR}/platform.tar.gz" -C "${WORKSPACE_DIR}/tmp" || {
            echo "Failed to extract collection (invalid tar.gz)"
            head -n 5 "${WORKSPACE_DIR}/platform.tar.gz"
            exit 1
          }
          
          # List contents to debug
          echo "Extracted contents:"
          ls -la tmp/

          # Copy contents (preserve galaxy.yml)
          cp -r "${WORKSPACE_DIR}/tmp/"* "$COLLECTION_DIR/"
          
          # List contents after copy to debug
          echo "Collection directory contents:"
          ls -la "$COLLECTION_DIR/"

          # Remove unwanted files
          rm -f "$COLLECTION_DIR/FILES.json" "$COLLECTION_DIR/MANIFEST.json"

          # Restore galaxy.yml from repo history
          git checkout HEAD~1 -- "$COLLECTION_DIR/galaxy.yml" || echo "galaxy.yml restored manually"

          # Clean up temporary files
          rm -rf "${WORKSPACE_DIR}/tmp" "${WORKSPACE_DIR}/platform.tar.gz"

          # Add changes and create commit
          git add "$COLLECTION_DIR"
          if git commit -m "[ansible] JFrog Platform ${VERSION} release"; then
              # Create and push tag
              RAW_TAG="ansible-platform-${VERSION}"
              TAG="${RAW_TAG//\//-}"
              git tag "$TAG"
              
              # Push branch and tag
              git push origin "$BRANCH"
              git push origin "$TAG"

              # Create PR with detailed information
              TITLE="[ansible] JFrog Platform ${VERSION} release"
              BODY="## Ansible Collection Update Details

              ðŸ”„ Updating JFrog Platform Ansible Collection
              - Version: ${VERSION}
              - Previous Version: ${{ needs.check-ansible-update.outputs.current-version }}
                            
              This is an automated update by the JFrog Ansible Collection update workflow."

              gh pr create \
                --title "$TITLE" \
                --body "$BODY" \
                --base "${{ github.event.repository.default_branch }}" \
                --head "$BRANCH" \
                --label "automated" \
                --label "ansible"

              echo "Successfully created PR for Ansible Collection update"
          else
              echo "No changes detected for Ansible Collection"
              # Clean up the branch if no changes
              git checkout "${{ github.event.repository.default_branch }}"
              git branch -D "$BRANCH"
          fi

          # Return to default branch
          git checkout "${{ github.event.repository.default_branch }}"


      - name: Create GitHub Releases (if enabled)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: ${{ inputs.create_release == 'true' }}
        run: |
          VERSION="${{ needs.check-ansible-update.outputs.latest-version }}"
          TAG="platform-${VERSION}"
          
          gh release create "$TAG" \
            --title "JFrog Platform Ansible Collection ${VERSION}" \
            --notes "Release for JFrog Platform Ansible Collection ${VERSION}
            
            Changes in this release:
            ${needs.check-ansible-update.outputs.update-summary}" \
            || echo "Release already exists"
